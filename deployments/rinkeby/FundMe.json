{
  "address": "0x2CF39084f70C811F92019A9F70523a9D7794C1e8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdfe8e523c544d6cb1669d07589b2c5bf4d43fca09fab66044610206dcaef61b8",
  "receipt": {
    "to": null,
    "from": "0x64Df13f02Fba95347138c7B8498BFFDeD98319F9",
    "contractAddress": "0x2CF39084f70C811F92019A9F70523a9D7794C1e8",
    "transactionIndex": 15,
    "gasUsed": "850173",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x07bb3a66aa297d2108d20c4e2570b5aa98518c3f91ed7620d1a8f0d49368db43",
    "transactionHash": "0xdfe8e523c544d6cb1669d07589b2c5bf4d43fca09fab66044610206dcaef61b8",
    "logs": [],
    "blockNumber": 11137792,
    "cumulativeGasUsed": "4072764",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419"
  ],
  "numDeployments": 4,
  "solcInputHash": "c52b29d3627bc9e208fdee9a2d3ec079",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"BeastDevMoney\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library here you can put \\\"paramaters\\\" and \\\"returns\\\" if it has the function\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is to demo a samle funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Pragma\\r\\npragma solidity ^0.8.7;\\r\\n// Imports\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"./PriceConverter.sol\\\";\\r\\n// Error Codes\\r\\nerror FundMe__NotOwner();\\r\\n\\r\\n//Interfaces, Libraries, Contracts\\r\\n/** @title A contract for crowd funding\\r\\n *  @author BeastDevMoney\\r\\n *  @notice This contract is to demo a samle funding contract\\r\\n *  @dev This implements price feeds as our library\\r\\n */\\r\\ncontract FundMe {\\r\\n    //Type Declarations\\r\\n    using PriceConverter for uint256;\\r\\n\\r\\n    //State Variables\\r\\n\\r\\n    uint256 public constant minimumUSD = 50 * 1e18; //constant variables are cheaper when it is called than normal variables\\r\\n    address[] public funders;\\r\\n    mapping(address => uint256) public addressToAmountFunded;\\r\\n    address public immutable owner;\\r\\n    AggregatorV3Interface public priceFeed;\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        //require(msg.sender == owner);\\r\\n        if (msg.sender != owner) revert FundMe__NotOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    //Functions Order:\\r\\n    //// constructor\\r\\n    //// receive\\r\\n    //// fallback\\r\\n    //// external\\r\\n    //// public\\r\\n    //// internal\\r\\n    //// private\\r\\n    //// view / pure\\r\\n\\r\\n    constructor(address priceFeedAddress) {\\r\\n        owner = msg.sender;\\r\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *  @notice This function funds this contract\\r\\n     *  @dev This implements price feeds as our library\\r\\n    here you can put \\\"paramaters\\\" and \\\"returns\\\" if it has the function\\r\\n     */\\r\\n    function fund() public payable {\\r\\n        require( //the first parameter it goint to be msg.value and the second paramater it's going to be priceFeed\\r\\n            msg.value.getConversionRate(priceFeed) >= minimumUSD,\\r\\n            \\\"Didn't send enough!\\\"\\r\\n        );\\r\\n        funders.push(msg.sender);\\r\\n        addressToAmountFunded[msg.sender] = msg.value;\\r\\n    }\\r\\n\\r\\n    function withdraw() public onlyOwner {\\r\\n        for (\\r\\n            uint256 funderIndex = 0;\\r\\n            funderIndex < funders.length;\\r\\n            funderIndex++\\r\\n        ) {\\r\\n            address funder = funders[funderIndex];\\r\\n            addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n\\r\\n        funders = new address[](0);\\r\\n\\r\\n        //transfer\\r\\n        //msg.sender = address\\r\\n        //payable(msg.sender) = payable address\\r\\n        //call\\r\\n        (bool callSucces, ) = payable(msg.sender).call{\\r\\n            value: address(this).balance\\r\\n        }(\\\"\\\");\\r\\n        require(callSucces, \\\"Call failed\\\");\\r\\n        //this it refers to the hole contract\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8d637eac56ccbabc84e7ab1e67f199c0e80be902371478a3908c4ec9a64260d4\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nlibrary PriceConverter {\\r\\n    function getPrice(AggregatorV3Interface priceFeed)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\r\\n        //Eth in terms of USD\\r\\n        //to convert the variable int256 price to uint256 price, we have to write the sintax like the underline.Also, we have to avilitate the function to make changes on the state\\r\\n        return uint256(price * 1e10);\\r\\n    }\\r\\n\\r\\n    function getVersion() public view returns (uint256) {\\r\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\r\\n            0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\\r\\n        );\\r\\n        return priceFeed.version();\\r\\n    }\\r\\n\\r\\n    function getConversionRate(\\r\\n        uint256 ethAmount,\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 ethPrice = getPrice(priceFeed);\\r\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; //we have to make that divison, because its a multiplication and the compiler will display 21 zeros\\r\\n        return ethAmountInUsd;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc5489a60a8c9d0d5dc30645cbacbafd7b8e3aa1435be08154b17fc6d04d6134a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610f65380380610f6583398181016040528101906100329190610113565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610140565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100e0826100b5565b9050919050565b6100f0816100d5565b81146100fb57600080fd5b50565b60008151905061010d816100e7565b92915050565b600060208284031215610129576101286100b0565b5b6000610137848285016100fe565b91505092915050565b60805160601c610e00610165600039600081816101a0015261041e0152610e006000f3fe6080604052600436106100705760003560e01c8063741bef1a1161004e578063741bef1a146100f45780638da5cb5b1461011f578063b60d42881461014a578063dc0d3dff1461015457610070565b80633430a88c146100755780633ccfd60b146100a05780633e47d6f3146100b7575b600080fd5b34801561008157600080fd5b5061008a610191565b6040516100979190610744565b60405180910390f35b3480156100ac57600080fd5b506100b561019e565b005b3480156100c357600080fd5b506100de60048036038101906100d991906107c2565b6103de565b6040516100eb9190610744565b60405180910390f35b34801561010057600080fd5b506101096103f6565b604051610116919061084e565b60405180910390f35b34801561012b57600080fd5b5061013461041c565b6040516101419190610878565b60405180910390f35b610152610440565b005b34801561016057600080fd5b5061017b600480360381019061017691906108bf565b610569565b6040516101889190610878565b60405180910390f35b6802b5e3af16b188000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610223576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156102ce576000808281548110610248576102476108ec565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806102c69061094a565b915050610226565b50600067ffffffffffffffff8111156102ea576102e9610993565b5b6040519080825280602002602001820160405280156103185781602001602082028036833780820191505090505b506000908051906020019061032e929190610684565b5060003373ffffffffffffffffffffffffffffffffffffffff1647604051610355906109f3565b60006040518083038185875af1925050503d8060008114610392576040519150601f19603f3d011682016040523d82523d6000602084013e610397565b606091505b50509050806103db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d290610a65565b60405180910390fd5b50565b60016020528060005260406000206000915090505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6802b5e3af16b188000061047f600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105a890919063ffffffff16565b10156104c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b790610ad1565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000818154811061057957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105b4836105e4565b90506000670de0b6b3a764000085836105cd9190610af1565b6105d79190610b7a565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561062d57600080fd5b505afa158015610641573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106659190610c38565b5050509150506402540be4008161067c9190610cb3565b915050919050565b8280548282559060005260206000209081019282156106fd579160200282015b828111156106fc5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106a4565b5b50905061070a919061070e565b5090565b5b8082111561072757600081600090555060010161070f565b5090565b6000819050919050565b61073e8161072b565b82525050565b60006020820190506107596000830184610735565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061078f82610764565b9050919050565b61079f81610784565b81146107aa57600080fd5b50565b6000813590506107bc81610796565b92915050565b6000602082840312156107d8576107d761075f565b5b60006107e6848285016107ad565b91505092915050565b6000819050919050565b600061081461080f61080a84610764565b6107ef565b610764565b9050919050565b6000610826826107f9565b9050919050565b60006108388261081b565b9050919050565b6108488161082d565b82525050565b6000602082019050610863600083018461083f565b92915050565b61087281610784565b82525050565b600060208201905061088d6000830184610869565b92915050565b61089c8161072b565b81146108a757600080fd5b50565b6000813590506108b981610893565b92915050565b6000602082840312156108d5576108d461075f565b5b60006108e3848285016108aa565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109558261072b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156109885761098761091b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b60006109dd6000836109c2565b91506109e8826109cd565b600082019050919050565b60006109fe826109d0565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610a4f600b83610a08565b9150610a5a82610a19565b602082019050919050565b60006020820190508181036000830152610a7e81610a42565b9050919050565b7f4469646e27742073656e6420656e6f7567682100000000000000000000000000600082015250565b6000610abb601383610a08565b9150610ac682610a85565b602082019050919050565b60006020820190508181036000830152610aea81610aae565b9050919050565b6000610afc8261072b565b9150610b078361072b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b4057610b3f61091b565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b858261072b565b9150610b908361072b565b925082610ba057610b9f610b4b565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610bca81610bab565b8114610bd557600080fd5b50565b600081519050610be781610bc1565b92915050565b6000819050919050565b610c0081610bed565b8114610c0b57600080fd5b50565b600081519050610c1d81610bf7565b92915050565b600081519050610c3281610893565b92915050565b600080600080600060a08688031215610c5457610c5361075f565b5b6000610c6288828901610bd8565b9550506020610c7388828901610c0e565b9450506040610c8488828901610c23565b9350506060610c9588828901610c23565b9250506080610ca688828901610bd8565b9150509295509295909350565b6000610cbe82610bed565b9150610cc983610bed565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d0857610d0761091b565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610d4557610d4461091b565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610d8257610d8161091b565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610dbf57610dbe61091b565b5b82820290509291505056fea264697066735822122086ff154cc302e0c094ac65e80665d9a833a2b8634fc7d183b177cf16b11f092264736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100705760003560e01c8063741bef1a1161004e578063741bef1a146100f45780638da5cb5b1461011f578063b60d42881461014a578063dc0d3dff1461015457610070565b80633430a88c146100755780633ccfd60b146100a05780633e47d6f3146100b7575b600080fd5b34801561008157600080fd5b5061008a610191565b6040516100979190610744565b60405180910390f35b3480156100ac57600080fd5b506100b561019e565b005b3480156100c357600080fd5b506100de60048036038101906100d991906107c2565b6103de565b6040516100eb9190610744565b60405180910390f35b34801561010057600080fd5b506101096103f6565b604051610116919061084e565b60405180910390f35b34801561012b57600080fd5b5061013461041c565b6040516101419190610878565b60405180910390f35b610152610440565b005b34801561016057600080fd5b5061017b600480360381019061017691906108bf565b610569565b6040516101889190610878565b60405180910390f35b6802b5e3af16b188000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610223576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156102ce576000808281548110610248576102476108ec565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806102c69061094a565b915050610226565b50600067ffffffffffffffff8111156102ea576102e9610993565b5b6040519080825280602002602001820160405280156103185781602001602082028036833780820191505090505b506000908051906020019061032e929190610684565b5060003373ffffffffffffffffffffffffffffffffffffffff1647604051610355906109f3565b60006040518083038185875af1925050503d8060008114610392576040519150601f19603f3d011682016040523d82523d6000602084013e610397565b606091505b50509050806103db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d290610a65565b60405180910390fd5b50565b60016020528060005260406000206000915090505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6802b5e3af16b188000061047f600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105a890919063ffffffff16565b10156104c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b790610ad1565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000818154811061057957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105b4836105e4565b90506000670de0b6b3a764000085836105cd9190610af1565b6105d79190610b7a565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561062d57600080fd5b505afa158015610641573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106659190610c38565b5050509150506402540be4008161067c9190610cb3565b915050919050565b8280548282559060005260206000209081019282156106fd579160200282015b828111156106fc5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106a4565b5b50905061070a919061070e565b5090565b5b8082111561072757600081600090555060010161070f565b5090565b6000819050919050565b61073e8161072b565b82525050565b60006020820190506107596000830184610735565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061078f82610764565b9050919050565b61079f81610784565b81146107aa57600080fd5b50565b6000813590506107bc81610796565b92915050565b6000602082840312156107d8576107d761075f565b5b60006107e6848285016107ad565b91505092915050565b6000819050919050565b600061081461080f61080a84610764565b6107ef565b610764565b9050919050565b6000610826826107f9565b9050919050565b60006108388261081b565b9050919050565b6108488161082d565b82525050565b6000602082019050610863600083018461083f565b92915050565b61087281610784565b82525050565b600060208201905061088d6000830184610869565b92915050565b61089c8161072b565b81146108a757600080fd5b50565b6000813590506108b981610893565b92915050565b6000602082840312156108d5576108d461075f565b5b60006108e3848285016108aa565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109558261072b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156109885761098761091b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b60006109dd6000836109c2565b91506109e8826109cd565b600082019050919050565b60006109fe826109d0565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610a4f600b83610a08565b9150610a5a82610a19565b602082019050919050565b60006020820190508181036000830152610a7e81610a42565b9050919050565b7f4469646e27742073656e6420656e6f7567682100000000000000000000000000600082015250565b6000610abb601383610a08565b9150610ac682610a85565b602082019050919050565b60006020820190508181036000830152610aea81610aae565b9050919050565b6000610afc8261072b565b9150610b078361072b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b4057610b3f61091b565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b858261072b565b9150610b908361072b565b925082610ba057610b9f610b4b565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610bca81610bab565b8114610bd557600080fd5b50565b600081519050610be781610bc1565b92915050565b6000819050919050565b610c0081610bed565b8114610c0b57600080fd5b50565b600081519050610c1d81610bf7565b92915050565b600081519050610c3281610893565b92915050565b600080600080600060a08688031215610c5457610c5361075f565b5b6000610c6288828901610bd8565b9550506020610c7388828901610c0e565b9450506040610c8488828901610c23565b9350506060610c9588828901610c23565b9250506080610ca688828901610bd8565b9150509295509295909350565b6000610cbe82610bed565b9150610cc983610bed565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d0857610d0761091b565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610d4557610d4461091b565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610d8257610d8161091b565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610dbf57610dbe61091b565b5b82820290509291505056fea264697066735822122086ff154cc302e0c094ac65e80665d9a833a2b8634fc7d183b177cf16b11f092264736f6c63430008080033",
  "devdoc": {
    "author": "BeastDevMoney",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feeds as our library here you can put \"paramaters\" and \"returns\" if it has the function"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this contract"
      }
    },
    "notice": "This contract is to demo a samle funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 63,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 67,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 72,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}